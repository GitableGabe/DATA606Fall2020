par(mar=c(4, 3.6, 0, 0), las = 1, mgp = c(2.7, 0.7, 0),
mfrow = c(1,6),
cex.lab = 1.5, cex.axis = 1.5)
histPlot(uni, xlab = "(b)", ylab = "", col = COL[1], axes = FALSE)
axis(1, seq(0,100,50))
boxPlot(uni, xlab = "(3)", ylab = "", col = COL[1,3])
# Chunk 7
set.seed(7365)
sym = rnorm(1000, mean = 60, sd = 3)
uni = runif(1000, min = 0, max = 100)
rs = rgamma(1000, shape = 3, rate = 2)
par(mar=c(4, 3.6, 0, 0), las = 1, mgp = c(2.7, 0.7, 0),
mfrow = c(1,6),
cex.lab = 1.5, cex.axis = 1.5)
histPlot(rs, xlab = "(c)", ylab = "", col = COL[1], axes = FALSE)
axis(1, seq(0,6,2))
boxPlot(rs, xlab = "(1)", ylab = "", col = COL[1,3])
# Chunk 8
library(openintro)
library(tidyverse)
#data("heartTr")
heartTr <- read.delim("D:/Git/DATA606Fall2020/course_data/os3_data/heartTr.txt")
# mosaic plot -------------------------------------------------------
par(mar = c(0, 0, 0, 0), las = 1, mgp = c(2.7, 0.9, 0))
mosaicplot(transplant ~ survived, data = heartTr,
main = "", xlab = "", ylab = "", color = COL[1],
cex.axis = 1.5)
# box plot ----------------------------------------------------------
par(mar = c(2, 4.8, 0, 0), las = 1, mgp = c(3.5, 0.7, 0),
cex.lab = 1.5, cex.axis = 1.5)
boxPlot(heartTr$survtime, fact = heartTr$transplant,
ylab = "Survival Time (days)", col = COL[1,2])
# Chunk 9: median_surv_control
# mean of control survival time
mean(heartTr$survtime[heartTr$transplant == "control"])
# median of control suvival time
#median(heartTr$survtime[heartTr$transplant == "control"])
# mean of control survival time
#mean(heartTr$survtime[heartTr$transplant == "treatment"])
median of control suvival time
#median(heartTr$survtime[heartTr$transplant == "treatment"])
# mean of control survival time
#mean(heartTr$survtime[heartTr$transplant == "treatment"])
#median of control suvival time
median(heartTr$survtime[heartTr$transplant == "treatment"])
View(heartTr)
count(heartTr,transplan == "treatment")
count(heartTr,transplan = "treatment")
count(heartTr,transplant = "treatment")
sum(transplant = "treatment")
sum(transplant == "treatment")
sum(transplant == treatment)
count(heartTr,transplant)
# Get count of control and treatment
count(heartTr,transplant)
sum(heartTr$transplant == "treatment")
# Get count of control and treatment
count(heartTr,transplant)
sum(heartTr$transplant == "treatment")
# proportion for treatment
sum(heart$survived == "dead" || heart$transplant == "treatment")
# Get count of control and treatment
count(heartTr,transplant)
sum(heartTr$transplant == "treatment")
# proportion for treatment
sum(heartTr$survived == "dead" || heartTr$transplant == "treatment")
# Get count of control and treatment
count(heartTr,transplant)
# proportion for treatment
sum(heartTr$survived == "dead" || heartTr$transplant == "treatment")/sum(heartTr$transplant == "treatment")
# Get count of control and treatment
count(heartTr,transplant)
sum(heartTr$transplant == "treatment")
# proportion for treatment
sum(heartTr$survived == "dead"||heartTr$transplant == "treatment")
# Get count of control and treatment
count(heartTr,transplant)
sum(heartTr$transplant == "treatment")
# proportion for treatment
sum(heartTr$survived == "dead" & heartTr$transplant == "treatment")
# Get count of control and treatment
count(heartTr,transplant)
# proportion for treatment
sum(heartTr$survived == "dead" & heartTr$transplant == "treatment")sum(heartTr$transplant == "treatment")
# Get count of control and treatment
count(heartTr,transplant)
# proportion for treatment
sum(heartTr$survived == "dead" & heartTr$transplant == "treatment")/sum(heartTr$transplant == "treatment")
# Get count of control and treatment
count(heartTr,transplant)
# proportion for treatment
sum(heartTr$survived == "dead" & heartTr$transplant == "treatment")/sum(heartTr$transplant == "treatment")
# proportion for treatment
sum(heartTr$survived == "dead" & heartTr$transplant == "control")/sum(heartTr$transplant == "control")
# Number patients who are survivors
sum(heartTr$survived == "alive")
# patients who did not survive
sum(heartTr$survived == "dead")
# Number of patients in treatment group
sum(heartTr$transplant == "treatment")
# Number of patients in control group
sum(heartTr$transplant == "control")
1-(sum(heartTr$survived == "dead" & heartTr$transplant == "treatment")/sum(heartTr$transplant == "treatment"))
1-(sum(heartTr$survived == "dead" & heartTr$transplant == "treatment")/sum(heartTr$transplant == "treatment"))
1-sum(heartTr$survived == "dead" & heartTr$transplant == "control")/sum(heartTr$transplant == "control")
(1-sum(heartTr$survived == "dead" & heartTr$transplant == "treatment")/sum(heartTr$transplant == "treatment"))
(1-sum(heartTr$survived == "dead" & heartTr$transplant == "control")/sum(heartTr$transplant == "control"))
(1-sum(heartTr$survived == "dead" & heartTr$transplant == "treatment")/sum(heartTr$transplant == "treatment"))-(1-sum(heartTr$survived == "dead" & heartTr$transplant == "control")/sum(heartTr$transplant == "control"))
viewLab('Lab3')
getLabs()
data(package='DATA606')
getLabs()
library('DATA606')
vignette(package='DATA606')
vignette('os4')
data(package='DATA606')
getLabs()
viewLab('Lab3')
startLab('Lab3')
ggplot(data = kobe_streak, aes(x = length)) +
geom_bar()
kobe_streak <- calc_streak(kobe_basket$shot)
ggplot(data = kobe_streak, aes(x = length)) +
geom_bar()
# Chunk 1: global_options
knitr::opts_chunk$set(eval = TRUE, results = FALSE, fig.show = "hide", message = FALSE)
library(tidyverse)
library(openintro)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
knitr::opts_chunk$set(eval = TRUE, results = FALSE, fig.show = "hide", message = FALSE, echo = TRUE)
library(tidyverse)
library(openintro)
glimpse(kobe_basket)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(openintro)
glimpse(kobe_basket)
library(tidyverse)
library(openintro)
# Chunk 1: global_options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(openintro)
glimpse(kobe_basket)
glimpse(kobe_basket)
kobe_streak <- calc_streak(kobe_basket$shot)
ggplot(data = kobe_streak, aes(x = length)) +
geom_bar()
kobe_basket$shot
kobe_streak <- calc_streak(kobe_basket$shot)
ggplot(data = kobe_streak, aes(x = length)) +
geom_bar()
ggplot(data = kobe_streak, aes(x = length)) +
geom_bar()
#Error: `data` must be a data frame, or other object coercible by `fortify()`, not a numeric vector
#Run `rlang::last_error()` to see where the error occurred.
#Work around error is to make data a dataframe
kobe_streak_val <- data.frame(group = "Kobes Streak", kobe_streak = kobe_streak)
ggplot(data = kobe_streak_val, aes(x = length)) +
geom_bar()
#Error: `data` must be a data frame, or other object coercible by `fortify()`, not a numeric vector
#Run `rlang::last_error()` to see where the error occurred.
#Work around error is to make data a dataframe
kobe_streak_val <- data.frame(group = "Kobes Streak", kobe_streak = kobe_streak)
ggplot(data = kobe_streak_val, aes(x = length, y = kobe_streak)) +
geom_bar()
View(kobe_streak_val)
#Error: `data` must be a data frame, or other object coercible by `fortify()`, not a numeric vector
#Run `rlang::last_error()` to see where the error occurred.
#Work around error is to make data a dataframe
kobe_streak_val <- data.frame(group = "Kobes Streak", kobe_streak = kobe_streak)
ggplot(data = kobe_streak_val, aes(y = kobe_streak)) +
geom_bar()
#Error: `data` must be a data frame, or other object coercible by `fortify()`, not a numeric vector
#Run `rlang::last_error()` to see where the error occurred.
#Work around error is to make data a dataframe
kobe_streak_val <- data.frame(group = "Kobes Streak", kobe_streak = kobe_streak)
ggplot(data = kobe_streak_val, aes(x = kobe_streak)) +
geom_bar()
# Insert code for Exercise 2 here
summarise_all(kobe_streak)
View(kobe_streak_val)
# Insert code for Exercise 2 here
summarise_all(kobe_streak_val$kobe_streak)
# Insert code for Exercise 2 here
summarise(kobe_streak_val$kobe_streak)
# Insert code for Exercise 2 here
kobe_streak%.%
summarise_all()
# Insert code for Exercise 2 here
kobe_streak%>%
summarise_all()
# Insert code for Exercise 2 here
kobe_streak%>%
summarise(kobe_streak$length)
# Insert code for Exercise 2 here
kobe_streak%>%
summarise_at("length")
# Insert code for Exercise 2 here
kobe_streak%>%
summarise(mean = mean(length)
glimpse(kobe_basket)
data("kobe_basket")
glimpse(kobe_streak)
# Insert code for Exercise 2 here
kobe_streak_val%>%
summarise(mean = mean(kobe_streak)
# Insert code for Exercise 2 here
kobe_streak%>%
count(streak)
# Insert code for Exercise 2 here
kobe_streak_val%>%
count(kobe_streak)
# Insert code for Exercise 2 here
kobe_streak_val%>%
count(kobe_streak)
kobe_streak_val%>%
summarise(mean_ks = mean(kobe_streak))
# Insert code for Exercise 2 here
kobe_streak_val%>%
count(kobe_streak)
kobe_streak_val%>%
summarise(mean_ks = mean(kobe_streak), median_ks = median(kobe_streak), min_ks = min(kobe_streak), max_ks = max(kobe_streak))
kobe_streak_val <- data.frame(group = "Kobes Streak", kobe_streak = kobe_streak)
ggplot(data = kobe_streak_val, aes(x = kobe_streak)) +
geom_bar()
# Chunk 1: global_options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(openintro)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
# Chunk 3: glimpse-data
glimpse(kobe_basket)
data("kobe_basket")
# Chunk 4: view-girls-counts
kobe_basket$shot
# Chunk 5: calc-streak-kobe
kobe_streak <- calc_streak(kobe_basket$shot)
# Chunk 1: global_options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(openintro)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
# Chunk 3: glimpse-data
glimpse(kobe_basket)
data("kobe_basket")
# Chunk 4: view-girls-counts
kobe_basket$shot
# Chunk 5: calc-streak-kobe
kobe_streak <- calc_streak(kobe_basket$shot)
# Chunk 6: plot-streak-kobe
# Chunk 1: global_options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(openintro)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
# Chunk 3: glimpse-data
glimpse(kobe_basket)
data("kobe_basket")
# Chunk 4: view-girls-counts
kobe_basket$shot
# Chunk 5: calc-streak-kobe
kobe_streak <- calc_streak(kobe_basket$shot)
# Chunk 6: plot-streak-kobe
# Chunk 7: plot-no-error
kobe_streak_val <- data.frame(group = "Kobes Streak", kobe_streak = kobe_streak)
ggplot(data = kobe_streak_val, aes(x = kobe_streak)) +
geom_bar()
# Error: `data` must be a data frame, or other object coercible by `fortify()`, not a numeric vector
# Run `rlang::last_error()` to see where the error occurred.
# Work around error is to make data a dataframe
kobe_streak_val <- data.frame(group = "Kobes Streak", kobe_streak = kobe_streak)
kobe_streak_val%>%
count(kobe_streak)
# kobe_streak_val%>%
#	summarise(mean_ks = mean(kobe_streak), median_ks = median(kobe_streak), min_ks = min(kobe_streak), max_ks =
# max(kobe_streak))
View(kobe_streak_val)
# Error: `data` must be a data frame, or other object coercible by `fortify()`, not a numeric vector
# Run `rlang::last_error()` to see where the error occurred.
# Work around error is to make data a dataframe
kobe_streak_val <- data.frame(group = "Kobes Streak", kobe_streaks = kobe_streak)
kobe_streak_val%>%
count(kobe_streaks)
# kobe_streak_val%>%
#	summarise(mean_ks = mean(kobe_streak), median_ks = median(kobe_streak), min_ks = min(kobe_streak), max_ks =
# max(kobe_streak))
View(kobe_streak_val)
kobe_streak_val%>%
count(kobes_streaks)
# kobe_streak_val%>%
#	summarise(mean_ks = mean(kobe_streak), median_ks = median(kobe_streak), min_ks = min(kobe_streak), max_ks =
# max(kobe_streak))
# Error: `data` must be a data frame, or other object coercible by `fortify()`, not a numeric vector
# Run `rlang::last_error()` to see where the error occurred.
# Work around error is to make data a dataframe
kobe_streak_val <- data.frame(group = "Kobes Streak", kobes_streak = kobe_streak)
kobe_streak_val%>%
count(kobes_streaks)
# kobe_streak_val%>%
#	summarise(mean_ks = mean(kobe_streak), median_ks = median(kobe_streak), min_ks = min(kobe_streak), max_ks =
# max(kobe_streak))
# Error: `data` must be a data frame, or other object coercible by `fortify()`, not a numeric vector
# Run `rlang::last_error()` to see where the error occurred.
# Work around error is to make data a dataframe
kobe_streak_val <- data.frame(group = "Kobes Streak", kobes_streak = kobe_streak)
# Error: `data` must be a data frame, or other object coercible by `fortify()`, not a numeric vector
# Run `rlang::last_error()` to see where the error occurred.
# Work around error is to make data a dataframe
kobe_streak_val <- data.frame(group = "Kobes Streak", streak = kobe_streak)
# Error: `data` must be a data frame, or other object coercible by `fortify()`, not a numeric vector
# Run `rlang::last_error()` to see where the error occurred.
# Work around error is to make data a dataframe
kobe_streak_val <- data.frame(group = "Kobes Streak", streak = kobe_streak)
kobe_streak_val%>%
count(kobes_streaks)
# kobe_streak_val%>%
#	summarise(mean_ks = mean(kobe_streak), median_ks = median(kobe_streak), min_ks = min(kobe_streak), max_ks =
# max(kobe_streak))
kobe_streak_val%>%
count(kobes_streak)
# kobe_streak_val%>%
#	summarise(mean_ks = mean(kobe_streak), median_ks = median(kobe_streak), min_ks = min(kobe_streak), max_ks =
# max(kobe_streak))
kobe_streak_val%>%
count(streak)
# kobe_streak_val%>%
#	summarise(mean_ks = mean(kobe_streak), median_ks = median(kobe_streak), min_ks = min(kobe_streak), max_ks =
# max(kobe_streak))
kobe_streak%>%
count(length())
# kobe_streak_val%>%
#	summarise(mean_ks = mean(kobe_streak), median_ks = median(kobe_streak), min_ks = min(kobe_streak), max_ks =
# max(kobe_streak))
kobe_streak%>%
count(length())
# kobe_streak_val%>%
#	summarise(mean_ks = mean(kobe_streak), median_ks = median(kobe_streak), min_ks = min(kobe_streak), max_ks =
# max(kobe_streak))
kobe_streak%>%
count(length)
# kobe_streak_val%>%
#	summarise(mean_ks = mean(kobe_streak), median_ks = median(kobe_streak), min_ks = min(kobe_streak), max_ks =
# max(kobe_streak))
commented out to address error
ggplot(data = kobe_streak, aes(x = length)) +
geom_bar()
kobe_basket%>%
count(shot)
# kobe_streak_val%>%
#	summarise(mean_ks = mean(kobe_streak), median_ks = median(kobe_streak), min_ks = min(kobe_streak), max_ks =
# max(kobe_streak))
kobe_streak%>%
count(streak)
glimpse(kobe_streak)
kobe_streak%>%
count(num)
kobe_streak%>%
count(num[1:76])
kobe_streak$count
kobe_streak
count(kobe_streak)
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size = 1, replace = TRUE)
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size = 1, replace = TRUE)
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(coin_outcomes, size = 100, replace = TRUE)
# Chunk 1: global_options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(openintro)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
# Chunk 3: glimpse-data
glimpse(kobe_basket)
data("kobe_basket")
# Chunk 4: view-girls-counts
kobe_basket$shot
# Chunk 5: calc-streak-kobe
kobe_streak <- calc_streak(kobe_basket$shot)
# Chunk 6: plot-streak-kobe
commented out to address error
ggplot(data = kobe_streak, aes(x = length)) +
geom_bar()
# Chunk 7: head-tail
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size = 1, replace = TRUE)
# Chunk 8: sim-fair-coin
sim_fair_coin <- sample(coin_outcomes, size = 100, replace = TRUE)
ggplot(data = kobe_streak, aes(x = length)) +
geom_bar()
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,
prob = c(0.2, 0.8))
ggplot(data = sim_unfair_coin, aes(x = length)) +
geom_bar()
ggplot(data = sim_unfair_coin, aes(y = count)) +
geom_bar()
ggplot(data = sim_unfair_coin, aes(y = count())) +
geom_bar()
ggplot(data = sim_unfair_coin, aes(y = count('heads'))) +
geom_bar()
ggplot(data = sim_unfair_coin, aes(y = count("heads"))) +
geom_bar()
ggplot(data = sim_unfair_coin, aes(y = "heads")) +
geom_bar()
sim_unfair_coin_df <- data.frame(sim_unfair_coin)
ggplot(data = sim_unfair_coin_df, aes(y =sim_unfair_coin )) +
geom_bar()
sim_unfair_coin_df <- data.frame(sim_unfair_coin)
ggplot(data = sim_unfair_coin_df, aes(x =sim_unfair_coin )) +
geom_bar()
View(kobe_basket)
View(kobe_basket)
ggplot(data = kobe_streak, aes(x = length)) +
geom_bar()
# Chunk 1: global_options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(openintro)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
# Chunk 3: glimpse-data
glimpse(kobe_basket)
data("kobe_basket")
# Chunk 4: view-girls-counts
kobe_basket$shot
# Chunk 5: calc-streak-kobe
kobe_streak <- calc_streak(kobe_basket$shot)
ggplot(data = kobe_streak, aes(x = length)) +
geom_bar()
ggplot(data = kobe_streak, aes(x = length)) +
geom_bar()
# Chunk 1: global_options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(openintro)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
# Chunk 3: glimpse-data
glimpse(kobe_basket)
data("kobe_basket")
# Chunk 4: view-girls-counts
kobe_basket$shot
# Chunk 5: calc-streak-kobe
kobe_streak <- calc_streak(kobe_basket$shot)
sim_fair_coin <- sample(coin_outcomes, size = 100, replace = TRUE)
# Chunk 1: global_options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(openintro)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
# Chunk 3: glimpse-data
glimpse(kobe_basket)
data("kobe_basket")
# Chunk 4: view-girls-counts
kobe_basket$shot
# Chunk 5: calc-streak-kobe
kobe_streak <- calc_streak(kobe_basket$shot)
# Chunk 6: plot-streak-kobe
ggplot(data = kobe_streak, aes(x = length)) +
geom_bar()
# Chunk 7: head-tail
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size = 1, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
# Chunk 1: global_options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(openintro)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
# Chunk 3: glimpse-data
glimpse(kobe_basket)
data("kobe_basket")
# Chunk 4: view-girls-counts
kobe_basket$shot
# Chunk 5: calc-streak-kobe
kobe_streak <- calc_streak(kobe_basket$shot)
# Chunk 6: plot-streak-kobe
ggplot(data = kobe_streak, aes(x = length)) +
geom_bar()
# Chunk 7: head-tail
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size = 1, replace = TRUE)
# Chunk 8: sim-fair-coin
sim_fair_coin <- sample(coin_outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,
prob = c(0.2, 0.8))
sim_unfair_coin_df <- data.frame(sim_unfair_coin)
ggplot(data = sim_unfair_coin_df, aes(x =sim_unfair_coin )) +
geom_bar()
